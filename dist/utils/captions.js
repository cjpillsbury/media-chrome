export const splitTextTracksStr=(t="")=>t.split(/\s+/),parseTextTrackStr=(t="")=>{const[r,e]=t.split(":"),o=e?decodeURIComponent(e):void 0;return{language:r,label:o}},parseTextTracksStr=(t="",r={})=>splitTextTracksStr(t).map(e=>{const o=parseTextTrackStr(e);return{...r,...o}}),parseTracks=t=>Array.isArray(t)?t.map(r=>typeof r=="string"?parseTextTrackStr(r):r):typeof t=="string"?parseTextTracksStr(t):[t],formatTextTrackObj=({label:t,language:r}={})=>t?`${r}:${encodeURIComponent(t)}`:r,stringifyTextTrackList=(t=[])=>Array.prototype.map.call(t,formatTextTrackObj).join(" "),isMatchingPropOf=(t,r)=>e=>e[t]===r,textTrackObjAsPred=t=>{const r=Object.entries(t).map(([e,o])=>isMatchingPropOf(e,o));return e=>r.every(o=>o(e))},updateTracksModeTo=(t,r=[],e=[])=>{const o=parseTracks(e).map(textTrackObjAsPred),s=n=>o.some(p=>p(n));Array.from(r).filter(s).forEach(n=>{n.mode=t})},getTextTracksList=(t,r=()=>!0)=>{if(!(t==null?void 0:t.textTracks))return[];const e=typeof r=="function"?r:textTrackObjAsPred(r);return Array.from(t.textTracks).filter(e)};
